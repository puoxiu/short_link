// Code generated by goctl. DO NOT EDIT.

package redict_models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	shortUrlAccessLogFieldNames          = builder.RawFieldNames(&ShortUrlAccessLog{})
	shortUrlAccessLogRows                = strings.Join(shortUrlAccessLogFieldNames, ",")
	shortUrlAccessLogRowsExpectAutoSet   = strings.Join(stringx.Remove(shortUrlAccessLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	shortUrlAccessLogRowsWithPlaceHolder = strings.Join(stringx.Remove(shortUrlAccessLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	shortUrlAccessLogModel interface {
		Insert(ctx context.Context, data *ShortUrlAccessLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ShortUrlAccessLog, error)
		Update(ctx context.Context, data *ShortUrlAccessLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultShortUrlAccessLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ShortUrlAccessLog struct {
		Id         int64          `db:"id"`
		ShortUrlId int64          `db:"short_url_id"`
		AccessTime time.Time      `db:"access_time"`
		AccessIp   string         `db:"access_ip"`
		UserAgent  sql.NullString `db:"user_agent"`
		Country    sql.NullString `db:"country"`
		Region     sql.NullString `db:"region"`
		City       sql.NullString `db:"city"`
	}
)

func newShortUrlAccessLogModel(conn sqlx.SqlConn) *defaultShortUrlAccessLogModel {
	return &defaultShortUrlAccessLogModel{
		conn:  conn,
		table: "`short_url_access_log`",
	}
}

func (m *defaultShortUrlAccessLogModel) withSession(session sqlx.Session) *defaultShortUrlAccessLogModel {
	return &defaultShortUrlAccessLogModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`short_url_access_log`",
	}
}

func (m *defaultShortUrlAccessLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultShortUrlAccessLogModel) FindOne(ctx context.Context, id int64) (*ShortUrlAccessLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", shortUrlAccessLogRows, m.table)
	var resp ShortUrlAccessLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShortUrlAccessLogModel) Insert(ctx context.Context, data *ShortUrlAccessLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, shortUrlAccessLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ShortUrlId, data.AccessTime, data.AccessIp, data.UserAgent, data.Country, data.Region, data.City)
	return ret, err
}

func (m *defaultShortUrlAccessLogModel) Update(ctx context.Context, data *ShortUrlAccessLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, shortUrlAccessLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ShortUrlId, data.AccessTime, data.AccessIp, data.UserAgent, data.Country, data.Region, data.City, data.Id)
	return err
}

func (m *defaultShortUrlAccessLogModel) tableName() string {
	return m.table
}
